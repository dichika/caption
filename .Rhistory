"bottom" = trunc(0.8 * len_long),
"middle" = trunc(0.5 * len_long),
"upper" = trunc(0.2 * len_long)
)
position_num
library("EBImage")
oryzaec <- readImage(f)
img <- readImage(f)
display(img)
font <- drawfont(weight=600, size=28)
library("EBImage")
font <- drawfont(weight=600, size=28)
image(img)
text
text.default
text(x = "hoge")
text(x = 10, y= 100, labels = "hoge")
text(x = 10, y= 100, labels = "hoge")
?text
text(x = 10, y= 100, labels = "hoge", pos = 1)
text(x = 10, y= 100, labels = "hoge", pos = 2)
text(x = 700, y= 1000, labels = "hoge", pos = 2)
text(x = 700, y= 1000, labels = "hoge", pos = 2)
f_output <- "output.png"
f_output <- "output.jpg"
jpeg(f_output, width=dim[1], height=dim[2])
jpeg(f_output, width=dim(img)[1], height=dim(img)[2])
par(mar=c(0,0,0,0), xpd=NA, mgp=c(0,0,0), oma=c(0,0,0,0), ann=F)
plot.new()
plot.window(0:1, 0:1)
usr <- par("usr")
rasterImage(img, usr[1], usr[3], usr[2], usr[4])
text(0.5, 0.5, "hello", cex=5, col=rgb(0.2, 0.2, 0.2, 0.7))
dev.off()
f_output <- "output.jpg"
jpeg(f_output, width=dim(img)[1], height=dim(img)[2])
par(mar=c(0,0,0,0), xpd=NA, mgp=c(0,0,0), oma=c(0,0,0,0), ann=F)
plot.new()
plot.window(0:1, 0:1)
usr <- par("usr")
rasterImage(img, usr[1], usr[3], usr[2], usr[4])
#add text
text(0.5, 0.8, "hello", cex=15, col=rgb(0.2, 0.2, 0.2, 0.7))
#close image
dev.off()
text(0.5, 0.2, "hello", cex=15, col=rgb(0.2, 0.2, 0.2, 0.7))
f_output <- "output.jpg"
jpeg(f_output, width=dim(img)[1], height=dim(img)[2])
par(mar=c(0,0,0,0), xpd=NA, mgp=c(0,0,0), oma=c(0,0,0,0), ann=F)
plot.new()
plot.window(0:1, 0:1)
usr <- par("usr")
rasterImage(img, usr[1], usr[3], usr[2], usr[4])
#add text
text(0.5, 0.2, "hello", cex=15, col=rgb(0.2, 0.2, 0.2, 0.7))
#close image
dev.off()
f_output <- "output.jpg"
jpeg(f_output, width=dim(img)[1], height=dim(img)[2])
par(mar=c(0,0,0,0), xpd=NA, mgp=c(0,0,0), oma=c(0,0,0,0), ann=F)
plot.new()
plot.window(0:1, 0:1)
usr <- par("usr")
rasterImage(img, usr[1], usr[3], usr[2], usr[4])
#add text
text(0.5, 0.1, "hello", cex=15, col=rgb(0.2, 0.2, 0.2, 0.7))
#close image
dev.off()
message <- "データサイエンティストさとようへいさん"
f_output <- "output.jpg"
jpeg(f_output, width=dim(img)[1], height=dim(img)[2])
par(mar=c(0,0,0,0), xpd=NA, mgp=c(0,0,0), oma=c(0,0,0,0), ann=F)
plot.new()
plot.window(0:1, 0:1)
usr <- par("usr")
rasterImage(img, usr[1], usr[3], usr[2], usr[4])
#add text
text(0.5, 0.1, message, cex=15, col=rgb(0.2, 0.2, 0.2, 0.7))
dev.off()
message <- "データサイエンティスト\nさとようへいさん"
f_output <- "output.jpg"
jpeg(f_output, width=dim(img)[1], height=dim(img)[2])
par(mar=c(0,0,0,0), xpd=NA, mgp=c(0,0,0), oma=c(0,0,0,0), ann=F)
plot.new()
plot.window(0:1, 0:1)
usr <- par("usr")
rasterImage(img, usr[1], usr[3], usr[2], usr[4])
text(0.5, 0.1, message, cex=15, col=rgb(0.2, 0.2, 0.2, 0.7))
dev.off()
text_color <- "white" # rgb(0.2, 0.2, 0.2, 0.7)
f_output <- "output.jpg"
jpeg(f_output, width=dim(img)[1], height=dim(img)[2])
par(mar = c(0,0,0,0), xpd = NA, mgp = c(0,0,0), oma = c(0,0,0,0), ann = FALSE)
plot.new()
plot.window(0:1, 0:1)
usr <- par("usr")
rasterImage(img, usr[1], usr[3], usr[2], usr[4])
text_color <- "white" # rgb(0.2, 0.2, 0.2, 0.7)
text(0.5, 0.1, message, cex = 15, col = text_color)
dev.off()
sos
tools::file_ext
tools::file_ext(f)
ext <- tools::file_ext(f)
?rasterImage
par("usr")
?par
jpeg
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
test_f <- "cat.jpg"
test_msg <- "データサイエンティスト\nさとようへいさん"
caption(test_f, test_msg)
debug(caption)
caption(test_f, test_msg)
ext
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
debug(caption())
debug(caption
)
caption(test_f, test_msg)
ext
f_input
caption(test_msg, test_f)
ext
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
debug(caption)
caption(test_msg, test_f)
dim(img)
test_f2 <- "cat.png"
caption(test_msg, test_f2)
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
test_f2 <- "dice.png"
caption(test_msg, test_f2)
smp = png::readPNG(test_f2)
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
test_f2 <- "dice.png"
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
caption(test_msg, test_f, font_size = 1, text_color = "black")
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
caption(test_msg, test_f2, font_size = 15, text_color = "black")
caption(test_msg, test_f2, font_size = 1, text_color = "black")
caption(test_msg, test_f, font_size = 15, text_color = "black")
caption(test_msg, test_f2, font_size = 1.5, text_color = "black")
debug(caption)
caption(test_msg, test_f2, font_size = 1.5, text_color = "black")
dim(img)
f_input
str(img)
str(img)
caption(test_msg, test_f2, text_color = "black")
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
dev.off()
dev.off()
dev.off()
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
library(caption)
system.file("data/ojisan.png", package="caption")
sato()
debug(sato)
sato()
msg
debug(sato)
sato()
system.file("data/ojisan.png", package = "caption")
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
library(caption)
sato()
?png
windows.options()$bitmap.aa.win.
windows.options()$bitmap.aa.win
library(caption)
sato()
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
download.file
capabilities("http/ftp"
)
?capabilities
library(caption)
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
debug(caption)
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
library(caption)
caption()
caption
library(caption)
caption
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
library(caption)
caption
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
library(caption)
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg",text_color="red")
?text
library(caption)
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
plot(1:10, 1:10, main = "text(...) examples\n~~~~~~~~~~~~~~",
sub = "R is GNU ©, but not ® ...")
mtext("«Latin-1 accented chars»: éè øØ å<Å æ<Æ", side = 3)
points(c(6,2), c(2,1), pch = 3, cex = 4, col = "red")
text(6, 2, "the text is CENTERED around (x,y) = (6,2) by default",
cex = .8)
text(2, 1, "or Left/Bottom - JUSTIFIED at (2,1) by 'adj = c(0,0)'",
adj = c(0,0))
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
library(caption)
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
caption
library(caption)
caption
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
caption
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
source('Q:/Pln/Analysis/998_code/caption/R/caption.R')
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
library(caption)
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
library(caption)
caption("ねこ", "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_March_2010-1.jpg")
library(caption)
library(caption)
sato()
library(caption)
sato()
msg_sato <- iconv("データサイエンティスト\nさとようへいさん", to = "UTF-8")
devtools::use_data(msg_sato, internal = TRUE)
library(caption)
sato()
base::.Platform
Sys.info()['sysname']
Sys.info()['sysname'] == "Darwin"
library(caption)
sato()
caption("へえ、あんたも石田基広っていうんだ", "http://30d.jp/img/yumiyumi73/public/9283f587-6b3f-4858-ba66-a416475f73f9_resize.jpg")
caption("へえ、あんたも\n石田基広っていうんだ", "http://30d.jp/img/yumiyumi73/public/9283f587-6b3f-4858-ba66-a416475f73f9_resize.jpg")
?par
library(caption)
devtools::install_github("dichika/caption")
library(caption)
caption("へえ、あんたも\n石田基広っていうんだ", "http://30d.jp/img/yumiyumi73/public/9283f587-6b3f-4858-ba66-a416475f73f9_resize.jpg")
sato()
source('~/caption/R/autocaption.R')
key <- "AIzaSyBWo9hCcly32Y5FhJJ3lMHoBtVz2IL7gV4"
f <- system.file("data/ojisan.png", package = "caption")
client_id <- "wakarihajimeta_my_translation"
client_secret <- "+FOOjy2q6UP0MItMm2u9OyvDCx+WAyikta7GYjb/alk="
translate
install.packages("translateR")
source('~/caption/R/autocaption.R')
CROWD_VISION_KEY <- "AIzaSyBWo9hCcly32Y5FhJJ3lMHoBtVz2IL7gV4"
f <- system.file("data/ojisan.png", package = "caption")
client_id <- "wakarihajimeta_my_translation"
client_secret <- "+FOOjy2q6UP0MItMm2u9OyvDCx+WAyikta7GYjb/alk="
res_json <- getCrowdvisionResult(f_input,
type = "LABEL_DETECTION",
maxResults = 1,
CROWD_VISION_KEY = CROWD_VISION_KEY)
res_json <- getCrowdvisionResult(f,
type = "LABEL_DETECTION",
maxResults = 1,
CROWD_VISION_KEY = CROWD_VISION_KEY)
require("httr")
source('~/caption/R/autocaption.R')
res_json <- getCrowdvisionResult(f,
type = "LABEL_DETECTION",
maxResults = 1,
CROWD_VISION_KEY = CROWD_VISION_KEY)
res_json
res <- jsonlite::fromJSON(content(res_json, as = "text"))$responses$labelAnnotations
res
name_en <- res[[1]]$description[1]
name_ja <- translate(content.vec = "person",
microsoft.client.id = client_id,
microsoft.client.secret = client_secret,
source.lang = "en",
target.lang = "ja")
require("translateR")
name_ja <- translate(content.vec = "person",
microsoft.client.id = client_id,
microsoft.client.secret = client_secret,
source.lang = "en",
target.lang = "ja")
name_ja
msg <- iconv(Nippon::kakasi("name_ja","-JH"), from = "UTF-8")
msg
msg <- iconv(Nippon::kakasi(name_ja,"-JH"), from = "UTF-8")
msg
res_json <- getCrowdvisionResult(f,
type = "LABEL_DETECTION",
maxResults = 3,
CROWD_VISION_KEY = CROWD_VISION_KEY)
res <- jsonlite::fromJSON(content(res_json, as = "text"))$responses$labelAnnotations
name_en <- res[[1]]$description[3]
name_ja <- translate(content.vec = "person",
microsoft.client.id = client_id,
microsoft.client.secret = client_secret,
source.lang = "en",
target.lang = "ja")
msg <- iconv(Nippon::kakasi(name_ja,"-JH"), from = "UTF-8")
msg
res
res[[1]]$description[3]
name_en <- res[[1]]$description[3]
name_ja <- translate(content.vec = name_en,
microsoft.client.id = client_id,
microsoft.client.secret = client_secret,
source.lang = "en",
target.lang = "ja")
msg <- iconv(Nippon::kakasi(name_ja,"-JH"), from = "UTF-8")
msg
sample(10)
sample(10, 1)
res_json <- getCrowdvisionResult(f,
type = "LABEL_DETECTION",
maxResults = 10,
CROWD_VISION_KEY = CROWD_VISION_KEY)
res <- jsonlite::fromJSON(content(res_json, as = "text"))$responses$labelAnnotations
name_en <- res[[1]]$description[sample(10, 1)]
name_en
res[[1]]
name_en <- res[[1]]$description[sample(length(res[[1]]$description), 1)]
name_en
name_en <- res[[1]]$description[sample(length(res[[1]]$description), 1)]
name_en
name_ja <- translate(content.vec = name_en,
microsoft.client.id = client_id,
microsoft.client.secret = client_secret,
source.lang = "en",
target.lang = "ja")
msg <- iconv(Nippon::kakasi(name_ja,"-JH"), from = "UTF-8")
caption(message = msg, f_input = f)
install.packages("showtext")
library(showtext)
?showtext
?showtext::showtext.auto
font.add("yugothic", regular = "Yu Gothic Medium.otf")
source('~/caption/R/caption.R')
caption(message = msg, f_input = f, font_family = "yugothic")
caption(message = msg, f_input = f, font_family = "YuGothic")
caption(message = msg, f_input = f, font_family = "Yu Gothic")
caption(message = msg, f_input = f, font_family = "YuGothic Medium")
caption(message = msg, f_input = f, font_family = "YuGothic Bold")
source('~/caption/R/caption.R')
caption(message = msg, f_input = f, font_family = "YuGothic Bold")
caption(message = msg, f_input = f)
source('~/caption/R/caption.R')
caption(message = msg, f_input = f)
caption(message = msg, f_input = f, font_family = "YuGothic Bold")
source('~/caption/R/autocaption.R')
autocaption(f_input = f,
font_family = "YuGothic Bold",
CROWD_VISION_KEY = CROWD_VISION_KEY,
client_id = client_id,
client_secret = client_secret)
source('~/caption/R/autocaption.R')
autocaption(f_input = f,
font_family = "YuGothic Bold",
CROWD_VISION_KEY = CROWD_VISION_KEY,
client_id = client_id,
client_secret = client_secret)
par
source('~/caption/R/autocaption.R')
autocaption(f_input = f,
font_family = "YuGothic Bold",
CROWD_VISION_KEY = CROWD_VISION_KEY,
client_id = client_id,
client_secret = client_secret)
source('~/caption/R/autocaption.R')
autocaption(f_input = f,
font_family = "YuGothic Bold",
CROWD_VISION_KEY = CROWD_VISION_KEY,
client_id = client_id,
client_secret = client_secret)
source('~/caption/R/autocaption.R')
autocaption(f_input = f,
font_family = "YuGothic Bold",
CROWD_VISION_KEY = CROWD_VISION_KEY,
client_id = client_id,
client_secret = client_secret)
source('~/caption/R/autocaption.R')
source('~/.active-rstudio-document')
devtools::install_github("dichika/caption")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/caption/R/autocaption.R', encoding = 'CP932')
source('~/caption/R/autocaption.R', encoding = 'CP932')
source('~/caption/R/autocaption.R', encoding = 'CP932')
autocaption(f_input = f_ojisan,
score = TRUE
font_family = "YuGothic Bold",
CROWD_VISION_KEY = CROWD_VISION_KEY,
AZURE_CLIENT_ID = AZURE_CLIENT_ID,
AZURE_CLIENT_SECRET = AZURE_CLIENT_SECRET
)
autocaption(f_input = f_ojisan,
score = TRUE,
font_family = "YuGothic Bold",
CROWD_VISION_KEY = CROWD_VISION_KEY,
AZURE_CLIENT_ID = AZURE_CLIENT_ID,
AZURE_CLIENT_SECRET = AZURE_CLIENT_SECRET
)
autocaption(f_input = f_ojisan,
score = TRUE,
font_family = "YuGothic Bold",
CROWD_VISION_KEY = CROWD_VISION_KEY,
AZURE_CLIENT_ID = AZURE_CLIENT_ID,
AZURE_CLIENT_SECRET = AZURE_CLIENT_SECRET
)
system.file("data/ojisan.png", package = "caption")
CROWD_VISION_KEY <- "AIzaSyBWo9hCcly32Y5FhJJ3lMHoBtVz2IL7gV4"
f_ojisan <- system.file("data/ojisan.png", package = "caption")
AZURE_CLIENT_ID <- "wakarihajimeta_my_translation"
AZURE_CLIENT_SECRET <- "+FOOjy2q6UP0MItMm2u9OyvDCx+WAyikta7GYjb/alk="
autocaption(f_input = f_ojisan,
score = TRUE,
font_family = "YuGothic Bold",
CROWD_VISION_KEY = CROWD_VISION_KEY,
AZURE_CLIENT_ID = AZURE_CLIENT_ID,
AZURE_CLIENT_SECRET = AZURE_CLIENT_SECRET
)
library("caption")
autocaption(f_input = f_ojisan,
score = TRUE,
font_family = "YuGothic Bold",
CROWD_VISION_KEY = CROWD_VISION_KEY,
AZURE_CLIENT_ID = AZURE_CLIENT_ID,
AZURE_CLIENT_SECRET = AZURE_CLIENT_SECRET
)
devtools::install_github("rstudio/shinygadgets")
library(caption)
#' @export
autocaption <- function(f_input, f_output = NULL, font_family = NULL, score = FALSE, CROWD_VISION_KEY, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET){
require("translateR")
require("httr")
res_json <- getCrowdvisionResult(f_input = f_input,
type = "LABEL_DETECTION",
maxResults = 10,
CROWD_VISION_KEY = CROWD_VISION_KEY)
res <- jsonlite::fromJSON(content(res_json, as = "text"))$responses$labelAnnotations
num <- sample(length(res[[1]]$description), 1)
name_en <- res[[1]]$description[num]
score <- trunc(res[[1]]$score[num] * 100)
suppressWarnings(name_ja <- translate(content.vec = name_en,
microsoft.client.id = client_id,
microsoft.client.secret = client_secret,
source.lang = "en",
target.lang = "ja")
)
msg <- iconv(Nippon::kakasi(name_ja,"-JH"), from = "UTF-8")
msg <- ifelse(score, paste(msg, " ", score, "％"), msg)
caption(message = msg, f_input = f_input, f_output = f_output, font_family = font_family)
message("DE-KI-TA-YO!!!")
}
library(caption)
CROWD_VISION_KEY <- "AIzaSyBWo9hCcly32Y5FhJJ3lMHoBtVz2IL7gV4"
f_ojisan <- system.file("data/ojisan.png", package = "caption")
AZURE_CLIENT_ID <- "wakarihajimeta_my_translation"
AZURE_CLIENT_SECRET <- "+FOOjy2q6UP0MItMm2u9OyvDCx+WAyikta7GYjb/alk="
library("caption")
autocaption(f_input = f_ojisan,
score = TRUE,
font_family = "YuGothic Bold",
CROWD_VISION_KEY = CROWD_VISION_KEY,
AZURE_CLIENT_ID = AZURE_CLIENT_ID,
AZURE_CLIENT_SECRET = AZURE_CLIENT_SECRET
)
getCrowdvisionResult
library(caption)
